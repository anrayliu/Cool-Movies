********
SKY DOCS
********
Sky is a python library designed to take care of many tedious things that normally come with Pygame.


****************
UNIVERSAL TRAITS
****************
If a method has center as a parameter, a pygame.Rect or a tuple (x, y, w, h) 
can be passed. If so, the method (such as drawing something) will be performed 
in the middle of the rect. If w is 0, the action will only be vertically
centered, and if h is 0, the action will only be centered horizontally.
Also, any colour parameters can accept RGB values (255, 0, 0), 
sky.colours constants (sky.RED), or the names of a sky.colours 
constant as a string ("red").


******
EVENTS
******
The events class is a simple way of getting common events.
create:
    events = sky.Events()
use:
    events.update() - call every frame
attributes:
    events.input_name - name of a pressed key
    events.input_key - pressed key
    events.quit - true if pygame.QUIT was found in pygame.event.get()
    events.click - true if left mouse button was clicked in pygame.event.get()
    events.keys_held - same as pygame.key.get_pressed()
    events.mouse_held - same as pygame.mouse.get_pressed()
    events.mouse - position of cursor
    events.x, events.y - position of cursor
example:
    events = sky.Events()
    while True: 
        events.update()
        if events.quit:
            sky.close()
    

********
GRAPHICS
********
The graphics class simplifies writing text and blitting image files. All fonts and images must first be loaded,
but after that, all resizing and changes are done automatically. The extensions for loaded files aren't saved,
so leave those out when using write() or draw(). All resized images and fonts are saved in memory to minimize 
surface resizing.
create:
    graphics = sky.Graphics(surface)
use:
    graphics.load_folder(path, resize={})
        Loads every ttf, otf, png, or jpg file in the given folder. Image names (without extensions) 
        can be matched with dimension tuples in the resize dict to control the sizes of loaded images.
    graphics.load_sysfont(font) - loads a system font
    graphics.load_font(path) - loads a ttf or otf font file
    graphics.load_image(path, dimensions=None) - loads a png or jpg image file; will be resized if dimensions is a size tuple
    graphics.write(text, pos, size=30, colour="white", transparency=None, font=None, center=None)
        Writes text onto graphics.surface.
    graphics.draw(image, pos, angle=None, size=None, transparency=None, center=None)
        Draws a loaded image onto graphics.surface.
    graphics.cut_spritesheet(image, rows, columns, amount)
        Will divide the given image into subsurfaces. Specify the number of rows, columns, and 
        the number of sprites on the image. Returns a list of cut surfaces.
attributes:
    graphics.surface - the surface where everything will be drawn or written to


******
BUTTON
******
Creates a rectangular button with some text on it.
create:
    button = sky.Button(x, y, w, h, text, colour="black", highlight="yellow", font="arial", font_size="30", font_colour="white", center=None)
        The font can be changed to anything loaded in the sky.Graphics class passed in draw().
use:
    button.update(events) - call every frame; takes a sky.Events class
    button.draw(graphics) - call every frame; takes a sky.Graphics class
attributes:
    button.click - true if the button was pressed when update() was called
    button.hover - true if the mouse was hovering over the button when update() was called
example:
    button = sky.Button(50, 50, 200, 100, "Click Me")
    while True:
        button.update(events)
        if button.click:
            print("Clicked!")
        button.draw(graphics)    


******
SLIDER
******
Creates horizontal or vertical rectangular sliders.
create:
    slider = sky.HorizontalSlider(x, y, w, h, range=(0, 100), colour="gray", dragger_colour="black", center=None)
    slider = sky.VerticalSlider(x, y, w, h, range=(0, 100), colour="gray", dragger_colour="black", center=None)
        The range specifies the minimum and maximum values for the slider.
use:
    slider.update(events) - call every frame; takes a sky.Events class 
    slider.draw(graphics) - call every frame; takes a sky.Graphics class
    slider.set_drag_pos(pos) - moves the dragger position to the given x or y
attributes:
    slider.value - current value of the slider 
example:
    slider = sky.VerticalSlider(50, 50, 80, 200)
    while True:
        slider.update(events)
        slider.draw(graphics)
        graphics.write(slider.value, (200, 100))
    
    
*********
PARTICLES
*********
Sky has 3 basic particle classes.
create:
    particle = sky.LineParticle(pos, angle=(0, 360), length=(20, 40), speed=(5, 15), colour="white", thickness=(5, 15))
    particle = sky.CircleParticle(pos, size=(5, 10), stroke=(5, 10), speed=(5, 10), colour="white")
    particle = sky.FallingParticle(pos, size=(4, 8), angle=(60, 120), speed=(5, 10), colour="white", gravity=0.3)
        The tuples specify a range where random numbers can be picked from.
use:
    particle.update() - call every frame
    particle.draw(surface) - call every frame; takes a surface to draw on
attributes:
    particle.delete - true if the particle has disappeared 
example:
    particles = []
    while True:
        particles.append(sky.LineParticle(events.mouse))
        for i, p in particles:
            p.update()
            if p.delete:
                del particles[n]
            else:
                p.draw(win)
                
    
*********
FUNCTIONS
*********
sky.close() - uninitializes pygame and terminates the entire program
sky.list_colours() - prints every colour in sky.colours
sky.confirm_assets(paths_list)
    If any of the paths in the given list aren't found, a notification will pop up notifying the user.
    After the notification is closed, sky.close() is called.
sky.draw_round_rect(surface, colour, rect, r) - draws the given rect with rounded edges relative to r